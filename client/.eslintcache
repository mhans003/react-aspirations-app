[{"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/index.js":"1","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/App.js":"2","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Context/AuthContext.js":"3","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Services/AuthService.js":"4","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Header/index.js":"5","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/NavItem/index.js":"6","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Home.js":"7","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Login.js":"8","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Message/index.js":"9","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Container/index.js":"10","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Register.js":"11","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Aspirations.js":"12","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Services/AspirationService.js":"13","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Aspiration/index.js":"14"},{"size":413,"mtime":1609797716833,"results":"15","hashOfConfig":"16"},{"size":704,"mtime":1609881686370,"results":"17","hashOfConfig":"16"},{"size":1059,"mtime":1609797608054,"results":"18","hashOfConfig":"16"},{"size":1801,"mtime":1609878087801,"results":"19","hashOfConfig":"16"},{"size":2556,"mtime":1609877212055,"results":"20","hashOfConfig":"16"},{"size":508,"mtime":1609876829713,"results":"21","hashOfConfig":"16"},{"size":96,"mtime":1609804553944,"results":"22","hashOfConfig":"16"},{"size":3279,"mtime":1609879532578,"results":"23","hashOfConfig":"16"},{"size":623,"mtime":1609878225297,"results":"24","hashOfConfig":"16"},{"size":151,"mtime":1609804329254,"results":"25","hashOfConfig":"16"},{"size":3599,"mtime":1609881527244,"results":"26","hashOfConfig":"16"},{"size":3458,"mtime":1609892595241,"results":"27","hashOfConfig":"16"},{"size":1831,"mtime":1609887380706,"results":"28","hashOfConfig":"16"},{"size":1777,"mtime":1609893902890,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"e0a404",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/index.js",[],["64","65"],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/App.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Context/AuthContext.js",["66"],"import { createContext, useState, useEffect } from \"react\";\nimport AuthService from \"../Services/AuthService\";\n\n//Export Provider and Consumer for global state.\nexport const AuthContext = createContext();\n\nexport default ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        AuthService.isAuthenticated().then(data => {\n            //Once the user is authenticatd, set the global state authentication.\n            setUser(data.user);\n            setIsAuthenticated(data.isAuthenticated);\n            setIsLoaded(true);\n        });\n    }, []);\n\n    //Return the children wrapped with the provider of the global context (once loaded).\n    return (\n        <div>\n            {!isLoaded ? <h1>Loading...</h1> : \n            <AuthContext.Provider value={{ user, setUser, isAuthenticated, setIsAuthenticated }}>\n                { children }\n            </AuthContext.Provider>}\n        </div>\n    );\n} \n\n","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Services/AuthService.js",["67"],"export default {\n    login: user => {\n        return fetch(\"/user/login\", {\n            method: \"post\",\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            //Passport sends 401 error back if not authenticated\n            if(response.status !== 401) {\n                return response.json().then(data => data);\n            } else {\n                return { \n                    isAuthenticated: false,\n                    user: {email: \"\", username: \"\", role: \"\"},\n                    message: {\n                        msgBody: \"Incorrect username or password.\",\n                        msgError: true\n                    }\n                };\n            }\n        });\n    },\n    register: user => {\n        return fetch(\"/user/register\", {\n            method: \"post\",\n            body: JSON.stringify(user),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json())\n          .then(data => data);\n    },\n    logout: () => {\n        return fetch(\"/user/logout\")\n            .then(response => response.json())\n            .then(data => data);\n    },\n    //Sync back-end and front-end together\n    isAuthenticated: () => {\n        return fetch(\"/user/authenticated\")\n            .then(response => {\n                //Passport sends 401 error back if not authenticated\n                if(response.status !== 401) {\n                    return response.json().then(data => data);\n                } else {\n                    return { \n                        isAuthenticated: false,\n                        user: {email: \"\", username: \"\", role: \"\"}\n                    };\n                }\n            });\n    }\n}","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Header/index.js",["68"],"import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport AuthService from \"../../Services/AuthService\";\nimport { AuthContext } from \"../../Context/AuthContext\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport NavItem from \"../NavItem\";\n\nconst Header = (props) => {\n    const { isAuthenticated, user, setIsAuthenticated, setUser } = useContext(AuthContext);\n\n    //Handle logging the user out.\n    const handleLogOut = () => {\n        //Using the logout function in AuthService, log the user out.\n        AuthService.logout().then(data => {\n            //From server, we will now have an empty user, so we want to update the global state.\n            if(data.success) {\n                setUser(data.user);\n                setIsAuthenticated(false);\n            }\n        });\n    };\n\n    //Render the navbar links when not logged in.\n    const unauthenticatedNabar = () => {\n        return (\n            <>\n                <NavItem text={\"HOME\"} tagName={\"\"} current={props.current}/>\n                <NavItem text={\"LOGIN\"} tagName={\"login\"} current={props.current}/>\n                <NavItem text={\"REGISTER\"} tagName={\"register\"} current={props.current}/>\n            </>\n        );\n    };\n\n    //Render navbar links when logged in.\n    const authenticatedNavbar = () => {\n        return (\n            <>\n                <NavItem text={user.username} tagName={\"\"} current={props.current}/>\n                <NavItem text={\"HOME\"} tagName={\"\"} current={props.current}/>\n                <NavItem text={\"ASPIRATIONS\"} tagName={\"aspirations\"} current={props.current}/>\n                {\n                    user.role === \"admin\" ? \n                    <NavItem text={\"ADMIN\"} tagName={\"admin\"} current={props.current}/> : null\n                }\n                <span className=\"nav-item\">\n                    <button type=\"button\" className=\"btn btn-link\" onClick={handleLogOut}>\n                        LOGOUT\n                    </button>\n                </span>\n            </>\n        );\n    };\n\n    return (\n        <Navbar className=\"navbar-light bg-light\" expand=\"md\">\n            <Navbar.Brand href=\"/\">ASPIRATIONS</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\">\n                    { !isAuthenticated ? unauthenticatedNabar() : authenticatedNavbar() }\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default Header;","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/NavItem/index.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Home.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Login.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Message/index.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Container/index.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Register.js",["69"],"import { useState, useRef, useEffect } from \"react\";\nimport AuthService from \"../Services/AuthService\";\nimport { AuthContext } from \"../Context/AuthContext\";\n\n//Import Components\nimport Container from \"../components/Container\";\nimport Message from \"../components/Message\";\n\nconst Register = (props) => {\n    //Initialize user state.\n    const [user, setUser] = useState({email: \"\", username: \"\", password: \"\", role: \"\"});\n    //Initialize message state.\n    const [message, setMessage] = useState(null);\n    //Set input fields to enabled by default until logged in.\n    const [disabled, setDisabled] = useState(false);\n\n    //Create a reference for the timer.\n    let timerID = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(timerID);\n        }\n    }, []);\n\n    //When the input changes, set the username/password to the current value.\n    const handleChange = (event) => {\n        event.preventDefault();\n        setUser(\n            {\n                ...user, \n                [event.target.name] : event.target.value\n            }\n        );\n    }\n\n    /*\n    const resetForm = () => {\n        setUser(\n            {\n                email: \"\",\n                username: \"\", \n                password: \"\", \n                role: \"\",\n            }\n        );\n    }\n    */\n\n    //Handle when the form is submitted.\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        //Send user information to sign up.\n        AuthService.register(user).then(data => {\n            //After registering, get the message returned back.\n            const { message } = data;\n            setMessage(message);\n            //Reset the form.\n            //resetForm();\n            //As long as there is no error, set the timer for 2 seconds to redirect to login page after registering.\n            if(!message.msgError) {\n                setDisabled(true);\n                timerID = setTimeout(() => {\n                    props.history.push(\"/login\");\n                }, 2000);\n            }\n        });\n    };\n\n    return (\n        <Container>\n            <form onSubmit={handleSubmit}>\n                <h3 className=\"text-center my-4\">Register</h3>\n                <hr className=\"my-4\"/>\n                <div className=\"form-group\">\n                    <input type=\"email\" name=\"email\" onChange={handleChange} className=\"form-control form-control-lg\" placeholder=\"Email\" aria-label=\"Enter Email\" disabled={disabled} required/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"text\" name=\"username\" onChange={handleChange} className=\"form-control form-control-lg\" placeholder=\"Username\" aria-label=\"Enter Username\" disabled={disabled} minLength=\"5\" required/>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"password\" name=\"password\" onChange={handleChange} className=\"form-control form-control-lg\" placeholder=\"Password\" aria-label=\"Enter Password\" disabled={disabled} minLength=\"8\" required/>\n                </div>\n                <div className=\"form-group d-none\">\n                    <input type=\"text\" name=\"role\" onChange={handleChange} className=\"form-control form-control-lg\" placeholder=\"user\" value=\"user\" disabled={true}/>\n                </div>\n                <button className=\"btn btn-lg btn-primary btn-block\" type=\"submit\" disabled={disabled}>\n                    Sign Up\n                </button>\n            </form>\n            {message ? <Message message={message}/> : null}\n        </Container>\n    );\n};\n\nexport default Register;","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/pages/Aspirations.js",[],"/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/Services/AspirationService.js",["70"],"export default {\n    //Get all aspirations.\n    getAspirations: () => {\n        return fetch(\"/user/aspirations\")\n            .then(response => {\n                if(response.status !== 401) {\n                    return response.json().then(data => data);\n                } else {\n                    return {\n                        message: {\n                            msgBody: \"Unauthorized\",\n                            msgError: true\n                        }\n                    };\n                }\n            });\n    },\n    //Save one aspiration.\n    postAspiration: (aspiration) => {\n        return fetch(\"/user/aspiration\", {\n            method: \"post\",\n            body: JSON.stringify(aspiration),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if(response.status !== 401) {\n                return response.json().then(data => data);\n            } else {\n                return {\n                    message: {\n                        msgBody: \"Unauthorized\",\n                        msgError: true\n                    }\n                };\n            }\n        });\n    },\n    //Post a milestone\n    postMilestone: (aspirationId, milestone) => {\n        return fetch(`/user/aspiration/${aspirationId}`, {\n            method: \"put\",\n            body: JSON.stringify(milestone),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => {\n            if(response.status !== 401) {\n                return response.json().then(data => data);\n            } else {\n                return {\n                    message: {\n                        msgBody: \"Unauthorized\",\n                        msgError: true\n                    }\n                };\n            }\n        })\n    }\n}","/Users/michaelhanson/Documents/Bootcamp/Week22/aspirations/client/src/components/Aspiration/index.js",["71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":7,"column":1,"nodeType":"78","endLine":30,"endColumn":2},{"ruleId":"76","severity":1,"message":"79","line":1,"column":1,"nodeType":"78","endLine":55,"endColumn":2},{"ruleId":"80","severity":1,"message":"81","line":2,"column":10,"nodeType":"82","messageId":"83","endLine":2,"endColumn":14},{"ruleId":"80","severity":1,"message":"84","line":3,"column":10,"nodeType":"82","messageId":"83","endLine":3,"endColumn":21},{"ruleId":"76","severity":1,"message":"79","line":1,"column":1,"nodeType":"78","endLine":60,"endColumn":2},{"ruleId":"80","severity":1,"message":"85","line":24,"column":11,"nodeType":"82","messageId":"83","endLine":24,"endColumn":20},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'AuthContext' is defined but never used.","'resetForm' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]